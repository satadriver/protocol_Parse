
#include <iostream>
#include "NetCard.h"
#include <windows.h>
#include <WinSock2.h>
#include "protocol.h"
#include "config.h"
#include "packet.h"
#include "public.h"
#include "winpcap.h"
#include "packetParser.h"
#include "fileOper.h"
#include "filter.h"
#include <IPTypes.h>
#include "DataList.h"
#include <DbgHelp.h>
#include "ProtocolParser.h"
#include "http/http.h"
#include "ssl/ssl.h"
#include "dns/dns.h"
#include "SoftFilter.h"
#include "MySqlite.h"
#include "DataList.h"
#include "parseAttacker.h"
#include "security.h"
#include "public.h"
#include "IMSG/qqcrypt.h"

#pragma comment(lib,"ws2_32.lib")
#pragma comment(lib,"dbghelp.lib")
#pragma comment(lib,"Iphlpapi.lib")
#pragma comment(lib,"./lib\\wpcap.lib")
#pragma comment(lib,"./lib\\ssleay32.lib")
#pragma comment(lib,"./lib\\libeay32.lib")
#pragma comment(lib,"./lib\\zlib.lib")
#pragma comment(lib,"Advapi32.lib")
#pragma comment(lib,"kernel32.lib")

using namespace std;

#define CONFIG_FILENAME "config.ini"


void test() {

	char testpack[] =
		/*
		"\x05\x30\x2a\xc8\x7f\x06\xca\x6f\x7f\xe2\x8c\x53\x94" \
		"\xdf\xcc\x93\x74\x59\xdb\x1c\x8a\x42\x5f\xfa\x7d\x28\x4b\xf4\xbf" \
		"\xa8\xf7\x23\x03\x96\x88\x43\x5e\x31\xf3\xdc\xc1\x01\x0d\x3b\x53" \
		"\x1f\x09\xa8\x4e\x8e\xaf\x6f\x19\x44\x28\x29\xa1\xb4\x22\xd5\x0d" \
		"\xb5\xce\x73\xe6\xe7\x45\x00\xe9\x70\xf4\x02\x0c\x85\xc8\x12\xf9" \
		"\x2c\x02\x30\x84\x7c\x4c\xee\xf8\x47\x13\x7e\x70\x44\x17\xdc\xd5" \
		"\x74\x45\x61\x16\x1e\x1e\xd4\xfd\x1a\x00\xdd\xb2\x09\x46\x30\xfa" \
		"\x21\xd7\x53\x26\x9a\x8e\x7c\x3e\x77\xf3\xd0\xe0\x18\xbf\xe3\x45" \
		"\x2f\xe2\x36\xfd\x60\x62\x5a\x05\x02\x18\x24\xda\xef";
	*/


		"\x05\x30\x42\xdc\x8d\x5a" \
		"\x36\x3b\x48\xfa\x4d\x2b\x22\x27\x66\xec\x2c\x76\x02\xba\x26\xef" \
		"\x66\x72\x9c\xc1\x81\x8f\x39\xe0\xf0\x3f\x08\xef\x65\xb2\x5d\x18" \
		"\x27\x08\x9f\xa9\xfb\x8c\xa6\x4e\xcf\x2a\x8b\x07\x0a\x25\x62\xc1" \
		"\xf6\x2e\xc4\xc3\x94\xe4\xbf\x1c\x5b\x80\x99\x80\x66\x4c\x37\xf5" \
		"\x4a\x06\xb2\x79\xe0\x1f\xe8\xac\x72\x91\x75\x8e\xbe\xe4\x84\xf8" \
		"\xe6\x0d\xcc\x9b\x6b\xe5\xf9\x8a\xda\xb1\xc1\x6c\x7a\xc7\x86\x28" \
		"\xc6\xef\x5c\x55\x5f\xab\x14\x0a\x5d\xda\xee\x18\x5e\x7a\x24\xe7" \
		"\x4f\x86\xa4\x15\xf2\x7a\x60\x45\xdd\xe9\x3a\x4e\x81\x6a\x52\xad" \
		"\xba\xea\xe9\x7e\xe5\x44\xdb\x38\x99\xb4\xc8\xb7\xf5\x91\xe3\x3e" \
		"\x40\xa8\x4b\x98\x8a\x21\x72\xc3\xb2\x1a\xfa\xfa\xf4\x07\x58\xa9" \
		"\x77\xc2\x1d\x1e\xf8\x87\x73\xb9\x5f\xb3\xa9\xfd\xaf\xd8\xd9\xb6" \
		"\xba\x31\x40\x74\x76\x86\xae\x09\x8f\xd0\x22\xd7\xab\xa0\x75\x93" \
		"\x71\x69\x9e\x7d\xca\x92\xc0\xbf\xd6\x25\x30\x46\x14\x4e\x48\x23" \
		"\x92\x24\x88\x45\x7b\x86\x3c\xbc\x3e\xde\x52\xb6\x8f\x72\xa8\xb7" \
		"\xb3\x52\x63\x8c\xae\xd9\x91\xa8\x51\xed\xce\xde\xc8\x0e\x7d\x6b" \
		"\x42\xbc\x03\xb6\x7f\x92\x1e\xfb\xdf\xc5\xc7\xdf\xd2\x17\x44\x69" \
		"\x82\xae\x1d\xd6\xec\xba\xee\xf8\x6e\xe9\xf8\x55\x66\x8f\x4a\x15" \
		"\x05\xe9\x94\xbd\x9d\xda\x0e\x3e\x86\x19\x92\x73\xe6\x60\x63\x51" \
		"\xee\xdc\xf8\xf3\x77\x06\xd6\x2c\x7e\xae\xf6\x9c\x8e\xea\xe6\xe8" \
		"\xab\x81\x68\xd9\x5f\x69\x3b\x07\x3b\x7b\x6c\x36\x53\x74\x00\x1f" \
		"\x2c\x27\x9e\xee\x5b\xfa\xce\x61\x16\xd5\xb7\xc5\xd6\x43\x08\xf8" \
		"\xf6\xd3\x15\x41\x9e\x1d\x59\x81\x2f\x9f\x93\xbd\xed\x2e\xe5\xe0" \
		"\xd7\x27\xeb\x95\xda\xfc\x15\xf0\x8a\xb2\x02\xe2\x7c\x1c\x6a\x7f" \
		"\xa8\xa2\xbb\x77\xc1\x13\x45\xc9\xd3\x97\x76\x3c\x02\x05\x70\x14" \
		"\x45\x71\x22\xcd\x7a\xcf\xc2\xe9\x45\xa0\x0d\xc9\xc2\x64\xab\xdd" \
		"\x1f\x93\x32\x60\xca\xa3\xfa\x82\x20\x60\x8a\xf7\x44\xdd\xda\x93" \
		"\x20\xed\x0c\xeb\xc0\x11\x51\xaf\x74\x74\xfd\x5d\xe9\x38\xb3\xed" \
		"\x24\x3f\xf9\x4e\xc6\x18\x7d\x1d\x3b\x2f\x5e\x36\x40\x8c\xec\xbb" \
		"\xfa\xb9\xf2\xef\x88\xf0\xa6\x97\x13\x40\x93\x1d\xa3\x2d\x3a\xa5" \
		"\xcb\xfd\xcf\x55\xfe\x73\x0f\x98\xb2\x0f\xe8\x32\x61\x9b\x5a\x4d" \
		"\x74\x4e\x95\x28\x35\xa9\x57\xd6\xa6\x18\xbb\xcb\xe6\x1f\x44\x87" \
		"\xe8\xd4\xf3\x14\xf7\x03\x30\xf3\x25\x0f\xd3\x03\x26\xe8\xa1\xd6" \
		"\xd0\xd6\x55\xec\xa4\xdd\x03\x63\x03\x9f\x43\x42\x4b\xaa\xf4\xa6" \
		"\x77\x84\x7c\x4b\xdb\x59\x7c\x69\xad\xc4\xfa\x54\xaf\x59\x4d\xc6" \
		"\xc5\x78\x66\x9a\xa8\x5c\x1a\x07\xb2\x0b\xfa\x09\x76\x1b\xb5\x49" \
		"\x14\x01\x44\x74\x7f\x40\x16\xc7\x30\xe5\x68\x58\xd5\x28\x2d\x87" \
		"\xb8\xa9\xc7\x85\xfe\x0d\x99\xb9\x96\x18\x24\xf4\x62\xd7\x0c\xbd" \
		"\x60\x5f\x6d\x82\x5a\xb8\xf9\x49\x43\x99\x29\xdb\x94\x43\x14\x47" \
		"\xe9\x52\x4b\xbb\xa3\x86\x69\x3d\x7e\xe7\x49\x7f\xde\x99\x8f\xb6" \
		"\x82\x2d\x08\x11\x7e\xce\xb4\x73\xf1\xab\xb1\x8c\xd4\x33\x8d\x97" \
		"\x39\x11\x45\x58\xa0\x91\x9c\xb7\x96\x45\x25\x7e\x2a\x38\x24\xc4" \
		"\x69\xf6\x2f\x0f\xe4\x6c\x69\xc4\x75\x83\x38\x2b\x7e\x41\x06\x26" \
		"\x86\xb8\x99\x14\x73\xc1\x4f\x30\xf6\x41\xe7\x79\x47\x4c\xe8\xf3" \
		"\x1e\x09\x14\x04\xc0\x51\x7b\x40\x84\xb5\xca\xcf\xb2\xb5\x34\xde" \
		"\x99\xe1\xe0\x90\x1a\x64\x0c\x21\x19\x2d\x3d\x72\x72\xf4\xf2\x99" \
		"\x41\x61\x28\xe8\xad\x9e\xd4\x30\x56\x70\xa9\x87\xfe\x9b\x0a\xb3" \
		"\xce\x32\x82\xdf\x8f\x11\x47\xaa\x60\x09\x86\x31\x5c\x22\x52\xdd" \
		"\xe1\xa1\xd6\x1a\x80\xb6\x28\x0a\xe0\x9e\xfb\x2c\x1e\x23\x71\x14" \
		"\xa1\x2c\xc7\xa5\x06\x88\x4a\xdf\xe3\x58\x7e\x09\x9f\x73\x18\xe0" \
		"\x65\xc0\x74\x92\x69\x7b\x28\x4d\xe6\x1e\x47\x43\x74\x37\x31\x62" \
		"\x89\xc7\x68\x7f\xfb\x83\x6a\x4e\xfb\xb7\x83\x0f\x18\x29\x4e\x55" \
		"\xe8\xe4\xb2\x1d\x0f\xc1\xf4\x78\x8b\x49\xd0\x1e\x5d\x7d\x31\x50" \
		"\x93\xb2\xc2\x95\x22\xc1\xf8\x0a\x6c\xe0\x05\xd7\x80\x6c\xa7\x21" \
		"\xb8\x0a\x88\xa5\xac\xb1\x1d\x1f\x3e\xba\xe0\xd1\x30\xca\xdf\xf5" \
		"\x4c\x2c\x10\xaa\x26\xb6\xa1\xbe\xfc\x1f\x51\xf7\xcb\xe1\x52\x4d" \
		"\x9a\xe1\x30\xf2\x64\x49\x16\x68\x2e\x06\x76\x5f\x01\xfd\xa6\xa9" \
		"\xe9\x4c\x01\xa4\x61\xe7\xe2\xe8\x5f\x53\x21\x10\xf7\x2e\x2e\x5a" \
		"\xcb\x2a\xd3\x40\x6e\x6b\x98\x1e\xa0\x50\x4c\xe6\xa4\x98\xba\xf2" \
		"\x02\x6c\x73\x52\xe5\x05\x85\xf7\x87\x78\xc4\xbd\x0a\x8f\x81\x83" \
		"\xfc\xbf\x1d\x3a\xaf\x4c\x65\xc0\x30\x8a\xc8\xb7\x10\xeb\xbf\x70" \
		"\xce\xe3\x95\x2a\xb0\x5c\x42\xc5\xb2\x91\x4a\x08\x3a\x79\xc1\xc1" \
		"\xcd\x14\x7b\x12\xe5\xa0\xc3\xde\xf8\x08\x00\xf8\x8f\x2d\xbf\x20" \
		"\xb7\x1d\x15\x12\xe6\x8a\xe5\xfd\x3e\xb3\x86\x13\xd7\xba\xf9\xc0" \
		"\xc8\x44\xc3\x56\x67\x59\x5a\x70\xff\xd6\x9e\x72\x67\x94\x6c\x5d" \
		"\x11\x2f\x16\x49\xd9\x93\x09\x50\x3e\xc4\x0c\x0b\x77\x84\xcd\xd6" \
		"\x08\xa9\x95\x01\xcc\x32\xe7\xbb\x98\x56\x6f\x82\xdd\x21\xc4\x58" \
		"\x8c\xfa\x7e\xd8\xcd\x77\x77\x89\xfa\x33\x70\xa7\x39\xf6\xf5\xe7" \
		"\x91\x57\x72\x07\xa6\x2c\x88\xca\x35\x47\x53\xcd\x6c\xeb\xd4\x71" \
		"\x8b\x5d\x5f\x74\xcc\x60\xfb\xd8\xef\x92\x49\x67\xe5\xa7\x0b\x5b" \
		"\xaf\x3e\xd0\xe7\x68\xbe\x6a\x0a\x12\xab\xf0\x3a\x2d\x03\x96\xe9" \
		"\xe1\x49\x96\x49\xf0\xbf\x84\x77\x7f\x73";
		





	/*
	unsigned data[1320] = {
		0x50, 0x4B, 0x55, 0x37, 0x6F, 0x16, 0x70, 0xDC, 0xE0, 0xC1, 0x5A, 0xE3, 0x6D, 0x48, 0x41, 0xAB,
		0x84, 0x78, 0xA4, 0x9B, 0xA4, 0x97, 0xF1, 0xA1, 0x96, 0xCA, 0x42, 0xE1, 0x43, 0x59, 0x07, 0x52,
		0x23, 0x8E, 0xA0, 0xD1, 0x1E, 0x55, 0xAC, 0xCE, 0x28, 0x54, 0x0B, 0x09, 0x83, 0xA0, 0x7C, 0x1E,
		0xEF, 0xAB, 0xB0, 0xEC, 0xA0, 0x6E, 0xAF, 0x95, 0x2E, 0xB1, 0x37, 0x82, 0x1B, 0x69, 0x91, 0xC7,
		0x7B, 0x34, 0x9C, 0xBA, 0x0E, 0x55, 0x3D, 0x5B, 0x1C, 0x32, 0x29, 0xEA, 0x03, 0x75, 0x21, 0x56,
		0x42, 0x8C, 0x75, 0x6E, 0x1C, 0xCB, 0x2F, 0xF1, 0x83, 0xB3, 0x91, 0x28, 0x36, 0x37, 0x0A, 0x5D,
		0x31, 0x88, 0xA8, 0xA1, 0x16, 0x5F, 0x95, 0x2F, 0xE9, 0xF4, 0x53, 0x34, 0xAA, 0x90, 0x16, 0xC6,
		0x4B, 0x16, 0xCD, 0x24, 0x04, 0xA7, 0x46, 0x2E, 0xB7, 0x92, 0xF6, 0x38, 0x42, 0x11, 0x7E, 0xF9,
		0x80, 0x19, 0x08, 0x05, 0x01, 0x46, 0xCC, 0xD2, 0x99, 0x43, 0x05, 0xE3, 0xFF, 0x38, 0x42, 0xE0,
		0x15, 0x95, 0xF0, 0x0A, 0x9C, 0x7D, 0xCD, 0x7B, 0x45, 0xD3, 0x0E, 0xCE, 0x65, 0x82, 0x4A, 0xA9,
		0xA8, 0x11, 0x37, 0xBC, 0x1C, 0x06, 0x5A, 0x23, 0x62, 0x1E, 0xBA, 0xBA, 0x9E, 0xE1, 0x51, 0x59,
		0x02, 0x6C, 0x72, 0xF5, 0x6A, 0x05, 0x2F, 0xAF, 0xFA, 0x6D, 0x3D, 0x53, 0x95, 0x04, 0xFF, 0xC4,
		0x7E, 0x9C, 0xDE, 0xC0, 0x6D, 0x63, 0xCC, 0xFC, 0x8C, 0x26, 0xEB, 0x21, 0xD7, 0xD2, 0x53, 0xEE,
		0x95, 0x74, 0x35, 0xE4, 0xB3, 0x77, 0xCD, 0x7C, 0x98, 0x76, 0x8D, 0x3B, 0xEC, 0x6C, 0xEC, 0x2F,
		0xD2, 0xA7, 0xDE, 0x76, 0x0A, 0x21, 0x83, 0xC2, 0x2E, 0xE1, 0x31, 0x1A, 0x0D, 0x7E, 0x84, 0x85,
		0x3C, 0xD4, 0x72, 0xE6, 0x47, 0xAE, 0xC0, 0x42, 0xF0, 0xCB, 0xFC, 0xBB, 0x5F, 0x1F, 0x39, 0x18,
		0xCF, 0x06, 0xF9, 0xE9, 0x0F, 0x96, 0x43, 0xE2, 0x3D, 0x27, 0xE2, 0xCD, 0x6D, 0x74, 0xC5, 0x51,
		0x6C, 0xDB, 0xD1, 0x2B, 0x2B, 0xE1, 0xE7, 0x68, 0x24, 0x92, 0xB7, 0xAF, 0x6F, 0x2D, 0x5B, 0x3E,
		0x70, 0x7E, 0x97, 0x95, 0xAE, 0x77, 0x5B, 0x3A, 0xC1, 0x58, 0xF1, 0x68, 0xC9, 0xC4, 0x69, 0xE7,
		0x71, 0xEE, 0x35, 0x47, 0x55, 0x45, 0xE4, 0x81, 0x5C, 0x07, 0x8C, 0xD7, 0xC8, 0x29, 0x47, 0x8C,
		0xFD, 0xCF, 0x3E, 0x56, 0x51, 0x60, 0x3B, 0xCC, 0xA9, 0xA7, 0x61, 0x8F, 0x63, 0x69, 0x65, 0x88,
		0x31, 0x6D, 0x1B, 0xD6, 0xA2, 0xE7, 0x4E, 0x14, 0x43, 0x4E, 0x06, 0xAD, 0x9F, 0xFA, 0x8D, 0x72,
		0xA9, 0xA5, 0xB7, 0x96, 0xF2, 0xB2, 0xA8, 0x0B, 0x12, 0x24, 0x2F, 0xE5, 0x14, 0xB5, 0x6C, 0xCB,
		0x0B, 0x4E, 0x65, 0x8A, 0x80, 0xA7, 0x29, 0x38, 0x14, 0x26, 0xDA, 0x48, 0x5D, 0xC0, 0x1C, 0x57,
		0x9C, 0xBA, 0x66, 0x9F, 0x8A, 0x25, 0xE3, 0x57, 0xCB, 0x35, 0xD9, 0x58, 0x1F, 0xEE, 0x1B, 0x3E,
		0xA3, 0xC2, 0x8E, 0x3B, 0x86, 0xA9, 0x04, 0x98, 0x36, 0x7A, 0xE5, 0x8F, 0x62, 0xC4, 0x0C, 0x32,
		0x32, 0xA5, 0xD0, 0xDA, 0x5C, 0x3D, 0x16, 0x94, 0xDF, 0x17, 0xD1, 0x19, 0x2B, 0x08, 0xF4, 0x03,
		0x02, 0xBD, 0x1E, 0x4B, 0x80, 0xA1, 0x6E, 0xDD, 0xF3, 0x0E, 0x15, 0xF7, 0xD0, 0x30, 0x81, 0x6C,
		0x65, 0x0B, 0x86, 0x81, 0x3B, 0x7D, 0xA7, 0x6E, 0xEC, 0xA1, 0xC1, 0xF5, 0x8E, 0x5A, 0x0B, 0x2B,
		0xB4, 0xE8, 0x26, 0xE1, 0xB4, 0xA4, 0x18, 0x2A, 0x7F, 0x0E, 0x8F, 0x00, 0xDB, 0x51, 0x1B, 0xB3,
		0x0D, 0x52, 0x0A, 0x0C, 0x0A, 0x5C, 0xB8, 0xC3, 0xE0, 0xFC, 0x0E, 0x10, 0xA7, 0x1C, 0x9B, 0xFE,
		0x61, 0x08, 0xCE, 0x30, 0x64, 0xE4, 0x5E, 0x3A, 0x86, 0x63, 0x6C, 0x5C, 0xA6, 0xFE, 0x87, 0x0D,
		0x49, 0x6E, 0x1D, 0x2C, 0x6B, 0xF3, 0x63, 0x30, 0x6B, 0xEA, 0xF7, 0x87, 0x10, 0x71, 0xFB, 0xB4,
		0xB9, 0x5C, 0x5E, 0x1F, 0xDB, 0x69, 0xCA, 0xE2, 0x1A, 0xAE, 0x4E, 0x94, 0xBD, 0xBA, 0x6B, 0x21,
		0x68, 0x53, 0x7C, 0x34, 0x03, 0x17, 0x29, 0x90, 0xDF, 0x9C, 0x1F, 0x8C, 0xD8, 0xAE, 0x0A, 0xC6,
		0x54, 0x7E, 0x30, 0x23, 0x48, 0xC7, 0xBE, 0x55, 0x26, 0x43, 0x71, 0x14, 0x90, 0x38, 0xF8, 0xE0,
		0xF4, 0x2B, 0x7B, 0x4C, 0xF0, 0x00, 0x83, 0x8C, 0x68, 0x31, 0xB9, 0xEF, 0xDB, 0x9B, 0x8D, 0x82,
		0xCE, 0x5F, 0xB9, 0x66, 0xCA, 0x66, 0x19, 0xFD, 0x02, 0xCD, 0xA9, 0x94, 0x67, 0xDF, 0x0F, 0x94,
		0xE6, 0x0F, 0x95, 0xB2, 0xDC, 0x57, 0x83, 0x6C, 0x07, 0x0E, 0x64, 0x8B, 0x53, 0xAF, 0xF6, 0xAB,
		0xB5, 0x27, 0xC5, 0x4B, 0x17, 0x92, 0xF8, 0x53, 0x67, 0xD6, 0xA1, 0x2F, 0x73, 0x63, 0x31, 0xC0,
		0xB1, 0xDF, 0x68, 0xA2, 0xCD, 0x45, 0x23, 0x76, 0x0C, 0xB7, 0xF9, 0x60, 0xA0, 0x55, 0x69, 0x60,
		0x75, 0xBC, 0x87, 0x68, 0x7C, 0xE4, 0x90, 0x30, 0x8B, 0xF9, 0xF4, 0x81, 0x0A, 0x11, 0x54, 0xAC,
		0x6F, 0xD3, 0x3C, 0x37, 0x29, 0x0A, 0x3B, 0x5B, 0x9D, 0xB1, 0x8E, 0xF9, 0x9D, 0xBF, 0x16, 0x09,
		0x21, 0x05, 0xE5, 0x8D, 0xCF, 0x26, 0x93, 0x12, 0xA8, 0xE3, 0xBC, 0x9C, 0x62, 0xB4, 0xAB, 0x8B,
		0xB6, 0xF2, 0x98, 0x2B, 0x24, 0xE8, 0x43, 0x72, 0x81, 0x72, 0x4A, 0x76, 0x9A, 0x85, 0x1A, 0x1C,
		0x17, 0xB8, 0xDE, 0x00, 0x63, 0x03, 0x8F, 0xE3, 0xAB, 0x8E, 0xBA, 0x50, 0x80, 0x15, 0xCE, 0x72,
		0x1A, 0xEE, 0x3C, 0x6A, 0x11, 0x0B, 0x77, 0x4B, 0x34, 0x34, 0x8E, 0x5C, 0x6E, 0x1A, 0x3B, 0xBF,
		0x9A, 0xBF, 0x77, 0xB5, 0x62, 0x9F, 0x80, 0x1F, 0xF5, 0x0C, 0x56, 0xA1, 0xC3, 0x5E, 0x51, 0xFE,
		0xE3, 0x10, 0x2E, 0xE3, 0xA2, 0x1E, 0x00, 0xB6, 0xCA, 0x98, 0xEF, 0x37, 0x48, 0x6D, 0x0E, 0x3A,
		0x7C, 0x59, 0xB4, 0x92, 0x7B, 0x16, 0x84, 0x9D, 0xFE, 0x2F, 0x43, 0x73, 0x1C, 0xF6, 0xA7, 0x65,
		0x33, 0xED, 0xCD, 0xD0, 0x14, 0x2C, 0x1B, 0x2F, 0xBA, 0xD3, 0xCF, 0x50, 0x80, 0x94, 0x89, 0xC0,
		0x65, 0x22, 0x9B, 0x63, 0x14, 0xFE, 0xDE, 0xEA, 0x6E, 0x16, 0xAD, 0x7F, 0xDD, 0xF2, 0x1F, 0xBB,
		0x2C, 0x0D, 0x24, 0xE6, 0x34, 0x98, 0x96, 0x09, 0xA5, 0x44, 0x7F, 0x26, 0xCF, 0x49, 0xA8, 0x51,
		0x5D, 0xF3, 0x41, 0x7A, 0xDB, 0x7B, 0xFD, 0x8D, 0xF4, 0x98, 0x9F, 0xBF, 0x25, 0xB2, 0xCF, 0x95,
		0xF8, 0x4A, 0x49, 0x16, 0x61, 0xE3, 0x24, 0x3B, 0xEE, 0xED, 0x97, 0xD2, 0xD9, 0x7A, 0xE1, 0x3E,
		0x33, 0xCF, 0x07, 0xD7, 0x7A, 0x4F, 0x2A, 0x36, 0x86, 0x20, 0xF3, 0xD2, 0xF1, 0x34, 0xA9, 0x81,
		0xCE, 0x3C, 0x08, 0x56, 0x84, 0x9E, 0xCA, 0x90, 0x0A, 0xC0, 0x10, 0x11, 0xC0, 0xD9, 0x2C, 0xD4,
		0x58, 0x9E, 0x02, 0x08, 0x2D, 0x4A, 0xC7, 0x16, 0xD5, 0x89, 0x13, 0x8F, 0x94, 0x00, 0x32, 0x52,
		0xD2, 0x4A, 0x4F, 0xDB, 0x51, 0x3E, 0xEE, 0xB1, 0x1C, 0xAC, 0xB3, 0xB3, 0x27, 0xDF, 0x1B, 0xBC,
		0x60, 0x59, 0x9B, 0xB2, 0xD4, 0x42, 0x0B, 0xD0, 0x6F, 0xF0, 0x2C, 0x18, 0x50, 0xC6, 0x0B, 0x06,
		0x64, 0x64, 0xB4, 0x9A, 0x59, 0xBC, 0xA2, 0x53, 0x1A, 0x04, 0x28, 0x41, 0x5D, 0xB3, 0x18, 0x3D,
		0xAD, 0xA6, 0xA0, 0x6C, 0x86, 0x69, 0xB4, 0x5C, 0x47, 0x78, 0xD9, 0xFC, 0x6D, 0x8F, 0x22, 0xC4,
		0x61, 0x32, 0xCB, 0x8A, 0x08, 0x7E, 0x8C, 0x62, 0x49, 0xA5, 0x89, 0x7F, 0xD7, 0x2B, 0x74, 0x97,
		0x40, 0x08, 0x0F, 0xB9, 0x7F, 0x60, 0x90, 0x52, 0xAD, 0x23, 0x0E, 0x9F, 0x34, 0x72, 0x86, 0x9C,
		0x6F, 0xE4, 0xA9, 0x44, 0xEC, 0xC3, 0xF1, 0xD4, 0x07, 0x87, 0xD2, 0x7F, 0xFA, 0x9C, 0xD1, 0x3B,
		0xEB, 0xC9, 0xA8, 0x87, 0xE4, 0x72, 0x0A, 0xBD, 0x8B, 0x63, 0x62, 0xF7, 0x0E, 0xA9, 0xEB, 0x7B,
		0x61, 0xB7, 0x36, 0xCB, 0xFD, 0x2E, 0x2C, 0x37, 0xFD, 0xBA, 0x6B, 0x6E, 0x81, 0x5A, 0xE4, 0x8E,
		0xD9, 0xCA, 0x16, 0x94, 0xB8, 0xF1, 0xDF, 0x0E, 0xA7, 0x5D, 0xF7, 0xAA, 0x96, 0x5A, 0xFB, 0x0B,
		0xBF, 0x21, 0x51, 0x5A, 0x81, 0x06, 0x7A, 0xA5, 0x90, 0xE2, 0x04, 0xBB, 0xAE, 0x1D, 0xDD, 0x4F,
		0x15, 0x2D, 0x2A, 0xF5, 0x96, 0x71, 0x9C, 0x62, 0x65, 0x62, 0x9A, 0xDF, 0x85, 0xB8, 0x50, 0x3F,
		0x60, 0xDA, 0xC5, 0xC5, 0x7B, 0x7B, 0x43, 0x7E, 0xF2, 0xCE, 0x19, 0x13, 0x7A, 0xAD, 0x0A, 0x70,
		0xD7, 0x30, 0xE3, 0xA3, 0xAA, 0x8E, 0x40, 0x63, 0xA4, 0x9D, 0x22, 0xED, 0xD3, 0x1C, 0xAD, 0x8C,
		0xE4, 0x74, 0xD0, 0xC1, 0x32, 0x23, 0x76, 0xE6, 0x01, 0x28, 0x4A, 0x76, 0x91, 0x56, 0x6A, 0x7B,
		0xB6, 0xDC, 0x6F, 0x65, 0xCB, 0x87, 0x39, 0xAF, 0x05, 0xDE, 0xB0, 0xF3, 0x4B, 0x32, 0xC3, 0xA4,
		0xB3, 0xE0, 0x04, 0x0A, 0xE8, 0x60, 0x69, 0x46, 0x38, 0x4E, 0xB8, 0x48, 0x19, 0x92, 0x54, 0x91,
		0xDB, 0xA8, 0x10, 0x6D, 0x43, 0xEC, 0x72, 0x57, 0xBD, 0xFA, 0x14, 0x52, 0x11, 0x3E, 0x7D, 0x6A,
		0x63, 0xAF, 0x26, 0xA4, 0x0A, 0x0F, 0x85, 0x36, 0x9F, 0x02, 0x5E, 0x18, 0xD1, 0x26, 0x9F, 0x25,
		0x2D, 0x27, 0x60, 0xC7, 0x46, 0xAF, 0x9D, 0x29, 0x9E, 0x47, 0xA6, 0x86, 0x73, 0x78, 0xDD, 0xD6,
		0x3F, 0xDB, 0xCB, 0x6E, 0x5B, 0x31, 0x9E, 0xFF, 0xAF, 0x9C, 0x71, 0x6E, 0xDA, 0xA5, 0x44, 0x9C,
		0x29, 0x9F, 0xED, 0x7B, 0xA1, 0xC6, 0x1C, 0xCC, 0x28, 0x93, 0x71, 0x59, 0xF7, 0x18, 0x41, 0x53,
		0x68, 0x14, 0xDD, 0x60, 0xF3, 0x91, 0xD6, 0xCC, 0xEA, 0x60, 0xC1, 0xAE, 0x29, 0x9C, 0x91, 0xB7,
		0x8F, 0x6A, 0xC9, 0xE0, 0xF7, 0x12, 0x3C, 0x56, 0xE7, 0x58, 0x0F, 0x87, 0xE4, 0x34, 0x63, 0xA4,
		0x2D, 0xB1, 0xEC, 0x50, 0x9A, 0x19, 0x07, 0xD3
	};*/

	unsigned data[148] = {
		0x9B, 0x59, 0xF3, 0x07, 0xDE, 0xA1, 0x6B, 0xDA, 0x78, 0x70, 0xC6, 0xE5, 0xD3, 0x96, 0x4B, 0x9C,
		0xEE, 0xB9, 0xC5, 0xE1, 0xF2, 0x83, 0x5C, 0x17, 0xB3, 0xBE, 0x35, 0x67, 0x0B, 0x5D, 0x0E, 0xE7,
		0x46, 0xC6, 0x4E, 0x0E, 0xF0, 0x92, 0x25, 0xFE, 0x44, 0x9A, 0x0C, 0xB1, 0x08, 0x9A, 0x53, 0x10,
		0x35, 0x3B, 0xC6, 0x42, 0x8D, 0x25, 0xDA, 0x67, 0x30, 0x5F, 0x38, 0xFA, 0x91, 0xE6, 0x6D, 0x03,
		0xE9, 0xC7, 0x15, 0xFC, 0x1F, 0x8D, 0x04, 0x68, 0xB3, 0x34, 0xFF, 0x40, 0x64, 0xC6, 0xD5, 0x27,
		0xAD, 0xA4, 0xED, 0x98, 0x97, 0x4F, 0xA5, 0x7F, 0x02, 0x2E, 0x93, 0xDB, 0x9E, 0xE2, 0xF6, 0x83,
		0x95, 0x2C, 0x72, 0x10, 0x43, 0x17, 0x82, 0xD2, 0x6C, 0x72, 0x94, 0x70, 0x98, 0x02, 0x5C, 0x5E,
		0x80, 0x80, 0x54, 0x7A, 0x00, 0x1C, 0xA9, 0x3F, 0x39, 0x47, 0xE1, 0x36, 0x0C, 0xFF, 0xBE, 0x1A,
		0x72, 0x13, 0x8C, 0xAB, 0x60, 0xDC, 0x9A, 0xBE, 0x9C, 0xC1, 0xE4, 0x2E, 0x88, 0x66, 0xCA, 0x3E,
		0x0D, 0x0A, 0x0D, 0x0A
	};

	int outbuflen = 0x10000;
	unsigned char * outbuf = new unsigned char[0x10000] ;
	memset(outbuf, 0, 0x10000);

	unsigned char key[16] = {
		0xF0, 0x44, 0x1F, 0x5F, 0xF4, 0x2D, 0xA5, 0x8F, 0xDC, 0xF7, 0x94, 0x9A, 0xBA, 0x62, 0xD4, 0x11
	};

	unsigned char key0[16] = { 0 };


	int ret = sizeof(testpack)-1;

	unsigned char* strtest = (unsigned char*)testpack;
	for (int i = 0; i < 256; i++) {

		ret = qq_decrypt(strtest+i, sizeof(testpack)-i-1, key0, outbuf, &outbuflen);
		if (ret) {
			break;
		}
	}

	//ret = qq_decrypt((unsigned char*)data, sizeof(data), key, outbuf, &outbuflen);
	if (ret )
	{
		printf("ok\r\n");
	}
}


#ifdef _CONSOLE
int main(int argc, char ** argv) {
#else
int __stdcall WinMain( _In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd ){
#endif

#ifndef _DEBUG
	DWORD debugThreadid = 0;
	CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)Security::antiDebug,0, 0, &debugThreadid));
#endif

	test();

	int ret = 0;

	char szout[1024];

	ret = NetCard::initWinSocket();

	HANDLE hMutext = (HANDLE)Public::checkInstanceExist();
	if (hMutext == FALSE)
	{
		getchar();
		exit(-1);
		return -1;
	}

	DWORD dwmode = 0;
	//HANDLE hc = GetConsoleWindow();
	HANDLE hc = GetStdHandle(STD_INPUT_HANDLE);
	ret = GetConsoleMode(hc, &dwmode);
	ret = SetConsoleMode(hc, ~ENABLE_QUICK_EDIT_MODE);

	MakeSureDirectoryPathExists(Public::getDataPath().c_str());
	
#ifndef PARSE_ATTACKER
	string cfgfn = Public::getpath() + CONFIG_FILENAME;
	MySqlite *sql = new MySqlite();
	sql->createTable();
	//sql->get("test","test");
	delete sql;

	vector <DNSSSL_REGULATION> ssllist;
	vector <DNSSSL_REGULATION> dnslist;
	vector <HTTP_REGULATION> httplist;
	vector<unsigned int>udpsports;
	vector<unsigned int>udpdports;
	vector<unsigned int>tcpsports;
	vector<unsigned int>tcpdports;
	ret = Config::parseHttpCfg(cfgfn, ssllist,dnslist, httplist,udpsports, udpdports,tcpsports,tcpdports);
	HTTP::init(httplist);
	SSL::init(ssllist);
	DNS::init(dnslist);
	SoftFilter::init(udpsports, udpdports,tcpsports,tcpdports);
#endif
	
	DataBlockList::init();

//#define WITHOUT_CONSOLE

#ifdef WITHOUT_CONSOLE
	vector<MYADAPTERINFO> infos = NetCard::selectWeapon();
	if (infos.size() == 0)
	{
		MessageBoxA(0, "init error", "init error", MB_OK);
		getchar();
		return -1;
	}
	
	int devok = FALSE;
	for (unsigned int i = 0;i < infos.size();i++)
	{
		int winpcapDelay = 100;

		string devname = string(WINPCAP_NETCARD_NAME_PREFIX) + infos[i].name;

		infos[i].pcapt = Winpcap::init(devname, winpcapDelay, infos[i].mask);
		if (infos[i].pcapt <= FALSE)
		{
			wsprintfA(szout, "winpcap init device:%s error\r\n", devname.c_str());
			Public::WriteLogFile(szout);
			continue;
		}

		PCAPPARAMS pcapparams = { 0 };
		pcapparams.packcnts = &infos[i].packcnts;
		pcapparams.pcapt = infos[i].pcapt;
		HANDLE hthread = CreateThread(0,0,(LPTHREAD_START_ROUTINE) PacketParser::peeping,&pcapparams,0,0);
		Sleep(500);
		string inetip = Public::GetInetIPAddress();
		Sleep(500);
		if (infos[i].packcnts < 2)
		{
			TerminateThread(hthread,0);

			CloseHandle(hthread);

			pcap_close(infos[i].pcapt);
			
			wsprintfA(szout, "winpcap capture packet in device:%s error\r\n", devname.c_str());
			Public::WriteLogFile(szout);
			continue;
		}
		else {
			CloseHandle(hthread);
			devok ++;
			wsprintfA(szout, "capture device:%s ok\r\n", devname.c_str());
			Public::WriteLogFile(szout);
		}
	}

	if (devok )
	{
		CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)DataBlockList::process, 0, 0, 0));

		while (1)
		{
			Sleep(-1);
		}
	}

#else 
	unsigned long localIP = 0;
	unsigned long netmask = 0;
	unsigned long netgateIP = 0;
	unsigned char localMac[MAC_ADDRESS_SIZE] = { 0 };
	string adaptername = NetCard::selectWeaponOld(&localIP, &netmask, &netgateIP, localMac);
	if (adaptername == "")
	{
		MessageBoxA(0, "can not get recv local ip", "can not get local ip", MB_OK);
		printf("parse selected net card information error\r\n");
		getchar();
		return -1;
	}

	int winpcapDelay = 1000;
	string devname = string(WINPCAP_NETCARD_NAME_PREFIX) + adaptername;
	pcap_t  *pcapt = Winpcap::init(devname, winpcapDelay, netmask);
	if (pcapt == 0)
	{
		printf("recv winpcap init error\r\n");
		MessageBoxA(0, "recv winpcap init error\r\n", "recv winpcap init error\r\n", MB_OK);
		getchar();
		return -1;
	}
	else {
		printf("winpcap init ok,param:name:%s,netmask:%08x,speed:%d\r\n", devname.c_str(), netmask, winpcapDelay);
	}



	CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)DataBlockList::process, 0, 0, 0));

	PCAPPARAMS params = { 0 };
	__int64 packcnt = 0;
	params.packcnts = &packcnt;
	params.pcapt = pcapt;

	//ret = PacketParser::peeping(&params);
	CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)PacketParser::peeping, &params, 0, 0));

#ifdef _DEBUG
	ret = Winpcap::dumpfile("debug.pcap", adaptername);
#endif

	pcap_close(pcapt);
#endif
	return 0;
}